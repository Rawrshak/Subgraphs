type ContentFactory @entity {
  id: ID!
  contents: [Content!] @derivedFrom(field: "factory")
  contentManagers: [ContentManager!] @derivedFrom(field: "factory")
}

type ContentManager @entity {
  id: ID!
  factory: ContentFactory!
  content: Content!
  owner: Account!
}

type Asset @entity{
  id: ID!
  tokenId: BigInt!
  parentContract: Content!
  currentSupply: BigInt!
  maxSupply: BigInt!
  balances: [AssetBalance!] @derivedFrom(field: "asset")
  royaltyReceiver: Account!
  royaltyRate: Int!
  latestHiddenUriVersion: BigInt!
  latestPublicUriVersion: BigInt!
  transactions: [Transaction!]! @derivedFrom(field: "assets")
  mintCount: BigInt!
  burnCount: BigInt!
}

type AssetBalance @entity {
  id: ID!
  asset: Asset!
  owner: Account!
  amount: BigInt!
}

type Content @entity {
  id: ID!
  factory: ContentFactory!
  manager: ContentManager! @derivedFrom(field: "content")
  contractAddress: Bytes!
  contractUri: String!
  assets: [Asset!]! @derivedFrom(field: "parentContract")
  royaltyReceiver: Account!
  royaltyRate: Int!
  minters: [Minter!] @derivedFrom(field: "content")
}

type Account @entity {
  id: ID!
  address: Bytes!
  assetBalances: [AssetBalance!]! @derivedFrom(field: "owner")
  transactions: [Transaction!]! @derivedFrom(field: "user")
  transactionsAsOperator: [Transaction!]! @derivedFrom(field: "operator")
  mintCount: BigInt!
  burnCount: BigInt!
  approvals: [Approval!] @derivedFrom(field: "user")
  minters: [Minter!] @derivedFrom(field: "operator")
}

type Approval @entity {
  id: ID!
  content: Content!
  operator: Account!
  user: Account!
}

enum TransactionType {
  Mint
  Burn
}

type Transaction @entity {
  id: ID!
  operator: Account!
  user: Account!
  transactionType: TransactionType!
  assets: [Asset!]! 
  amounts: [BigInt!]!
  blockNumber: BigInt!
  timestamp: BigInt!
  gasUSed: BigInt!
  gasPrice: BigInt!
}

type Minter @entity {
  id: ID!
  content: Content!
  operator: Account!
}